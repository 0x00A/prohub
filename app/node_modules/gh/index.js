var tokenparser = require('./tokenparser');
var github = require('./client');
var asyncCached = require('./asynccached');
var dal = require('dal/project');
var cookie = require('cookie');
var urlutil = require('url');

var authError = new Error('You have not authenticated through Github');
var getCurrentUserCached = asyncCached(github.getCurrentUser, 600);

function verifyToken(token, cb) {

  if (!token || ('object' !== typeof token) ||
    ('string' !== typeof token.access_token)) {
      return cb(authError);
  }

  dal.getVerifiedToken({ token: token }, function(err, v) {
    if (err || !v) {
      return getCurrentUserCached(token, null, function(err, data) {
        if (err) return cb(authError);
        if (!data || !data.id) return cb(authError);

        return dal.putVerifiedToken({ token: token }, function(err) {
          if (err) return cb(authError);
          cb(null, true);
        });
      });
    }

    return cb(null, true);
  });
}

exports.requestAuth = function requestAuth(req, res, cb) {

  var cookiesString = '';

  if (req.headers && 'string' === typeof req.headers.cookie) {
    cookiesString = req.headers.cookie;
  }

  var token = tokenparser.parse(cookiesString);

  verifyToken(token, function verifyTokenCallback(err, result) {

    if (err || !result) {
      var u = urlutil.parse(req.url).pathname;
      if (!/^\/callback/.test(u) && !/^\/login/.test(u)) {
        res.statusCode = 301;
        res.setHeader('Location', '/login');
        return res.end();
      }
    }

    cb(null, token);
  });
};

exports.socketAuth = function socketAuth(stream, cb) {

  var cookiesString = '';

  if (!stream.transport || // javascript <3
      !stream.transport.request || // javascript <3
      !stream.transport.request.headers || // javascript <3
      !stream.transport.request.headers.cookie) {
    return cb(authError);
  }

  cookiesString = stream.transport.request.headers.cookie;

  var token = tokenparser.parse(cookiesString);

  verifyToken(token, function verifyTokenCallback(err, result) {
    if (err || !result) return cb(err);
    return cb(null, token);
  });
};

